// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("AccountId");

                    b.HasIndex(new[] { "ClientId" }, "IX_Relationship48");

                    b.HasIndex(new[] { "TypeId" }, "IX_Relationship49");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_Relationship51");

                    b.HasIndex(new[] { "StatusId" }, "IX_Relationship59");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AccountStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("AccountStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AccountType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("AccountType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.Property<string>("CardId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CardID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BlockedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Blocked_at");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("CVV");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("date");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("CardId");

                    b.HasIndex(new[] { "TypeId" }, "IX_Relationship2");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_Relationship4");

                    b.HasIndex(new[] { "AccountId" }, "IX_Relationship50");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.HasKey("ChatId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"), 1L, 1);

                    b.Property<decimal>("Course")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Deposit", b =>
                {
                    b.Property<string>("DepositId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DepositID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<int>("DepositTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DepositTypeID");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DocumentID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("DepositId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Relationship11");

                    b.HasIndex(new[] { "DocumentId" }, "IX_Relationship37");

                    b.HasIndex(new[] { "AccountId" }, "IX_Relationship57");

                    b.HasIndex(new[] { "DepositTypeId" }, "IX_Relationship9");

                    b.ToTable("Deposit", (string)null);
                });

            modelBuilder.Entity("Domain.Models.DepositStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("DepositStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Models.DepositType", b =>
                {
                    b.Property<int>("DepositTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepositTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepositTypeId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(2,1)");

                    b.Property<decimal?>("MinAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("MinTerm")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepositTypeId");

                    b.ToTable("DepositType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DocumentID");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("DocumentId");

                    b.HasIndex(new[] { "ClientId" }, "IX_Relationship27");

                    b.HasIndex(new[] { "TypeId" }, "IX_Relationship28");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Domain.Models.DocumentType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.Property<string>("FileId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("FileID");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<DateTime>("UploadAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Upload_at");

                    b.HasKey("FileId");

                    b.HasIndex(new[] { "MessageId" }, "IX_Relationship26");

                    b.HasIndex(new[] { "ClientId" }, "IX_Relationship47");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.Models.Loan", b =>
                {
                    b.Property<string>("LoanId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LoanID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DocumentID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LoanTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LoanTypeID");

                    b.Property<decimal>("RemarningAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("LoanId");

                    b.HasIndex(new[] { "DocumentId" }, "IX_Relationship36");

                    b.HasIndex(new[] { "AccountId" }, "IX_Relationship58");

                    b.HasIndex(new[] { "LoanTypeId" }, "IX_Relationship7");

                    b.HasIndex(new[] { "StatusId" }, "IX_Relationship8");

                    b.ToTable("Loan", (string)null);
                });

            modelBuilder.Entity("Domain.Models.LoanStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("LoanStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Models.LoanType", b =>
                {
                    b.Property<int>("LoanTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoanTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanTypeId"), 1L, 1);

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(2,1)");

                    b.Property<decimal>("MaxLoanAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LoanTypeId");

                    b.ToTable("LoanType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("TredId")
                        .HasColumnType("int")
                        .HasColumnName("TredID");

                    b.HasKey("MessageId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Relationship21");

                    b.HasIndex(new[] { "TredId" }, "IX_Relationship44");

                    b.HasIndex(new[] { "ClientId" }, "IX_Relationship46");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MessageStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("MessageStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OperationHistory", b =>
                {
                    b.Property<string>("OperationId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OperationID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DestinationAccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DestinationAccountID");

                    b.Property<string>("DestinationCardId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DestinationCardID");

                    b.Property<string>("SenderAccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SenderAccountID");

                    b.Property<string>("SenderCardId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SenderCardID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("OperationId");

                    b.HasIndex(new[] { "SenderCardId" }, "IX_Relationship17");

                    b.HasIndex(new[] { "TypeId" }, "IX_Relationship18");

                    b.HasIndex(new[] { "StatusId" }, "IX_Relationship19");

                    b.HasIndex(new[] { "SenderAccountId" }, "IX_Relationship52");

                    b.HasIndex(new[] { "DestinationAccountId" }, "IX_Relationship55");

                    b.HasIndex(new[] { "DestinationCardId" }, "IX_Relationship56");

                    b.ToTable("OperationHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OperationStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("OperationStatus", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OperationType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("OperationType", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Tred", b =>
                {
                    b.Property<int>("TredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TredID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TredId"), 1L, 1);

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("OperatorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OperatorID");

                    b.HasKey("TredId");

                    b.HasIndex(new[] { "ChatId" }, "IX_Relationship43");

                    b.HasIndex(new[] { "OperatorId" }, "IX_Relationship45");

                    b.ToTable("Tred", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TypeOfCard", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("TypeId");

                    b.ToTable("Type_of_card", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("ClientId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientID");

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int")
                        .HasColumnName("Deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("NumberPasport")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Patronomic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("SeriesPasport")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("ClientId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Relationship3");

                    b.HasIndex(new[] { "ChatId" }, "IX_Relationship39");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.HasOne("Domain.Models.User", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("Relationship48");

                    b.HasOne("Domain.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("Relationship51");

                    b.HasOne("Domain.Models.AccountStatus", "Status")
                        .WithMany("Accounts")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("Relationship59");

                    b.HasOne("Domain.Models.AccountType", "Type")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Relationship49");

                    b.Navigation("Client");

                    b.Navigation("Currency");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("Relationship50");

                    b.HasOne("Domain.Models.Currency", "Currency")
                        .WithMany("Cards")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("Relationship4");

                    b.HasOne("Domain.Models.TypeOfCard", "Type")
                        .WithMany("Cards")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Relationship2");

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.Deposit", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Deposits")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("Relationship57");

                    b.HasOne("Domain.Models.DepositType", "DepositType")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositTypeId")
                        .IsRequired()
                        .HasConstraintName("Relationship9");

                    b.HasOne("Domain.Models.Document", "Document")
                        .WithMany("Deposits")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("Relationship37");

                    b.HasOne("Domain.Models.DepositStatus", "Status")
                        .WithMany("Deposits")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("Relationship11");

                    b.Navigation("Account");

                    b.Navigation("DepositType");

                    b.Navigation("Document");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Models.Document", b =>
                {
                    b.HasOne("Domain.Models.User", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("Relationship27");

                    b.HasOne("Domain.Models.DocumentType", "Type")
                        .WithMany("Documents")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Relationship28");

                    b.Navigation("Client");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.File", b =>
                {
                    b.HasOne("Domain.Models.User", "Client")
                        .WithMany("Files")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("Relationship47");

                    b.HasOne("Domain.Models.Message", "Message")
                        .WithMany("Files")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("Relationship26");

                    b.Navigation("Client");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Models.Loan", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Loans")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("Relationship58");

                    b.HasOne("Domain.Models.Document", "Document")
                        .WithMany("Loans")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("Relationship36");

                    b.HasOne("Domain.Models.LoanType", "LoanType")
                        .WithMany("Loans")
                        .HasForeignKey("LoanTypeId")
                        .IsRequired()
                        .HasConstraintName("Relationship7");

                    b.HasOne("Domain.Models.LoanStatus", "Status")
                        .WithMany("Loans")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("Relationship8");

                    b.Navigation("Account");

                    b.Navigation("Document");

                    b.Navigation("LoanType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.HasOne("Domain.Models.User", "Client")
                        .WithMany("Messages")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("Relationship46");

                    b.HasOne("Domain.Models.MessageStatus", "Status")
                        .WithMany("Messages")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("Relationship21");

                    b.HasOne("Domain.Models.Tred", "Tred")
                        .WithMany("Messages")
                        .HasForeignKey("TredId")
                        .IsRequired()
                        .HasConstraintName("Relationship44");

                    b.Navigation("Client");

                    b.Navigation("Status");

                    b.Navigation("Tred");
                });

            modelBuilder.Entity("Domain.Models.OperationHistory", b =>
                {
                    b.HasOne("Domain.Models.Account", "DestinationAccount")
                        .WithMany("OperationHistoryDestinationAccounts")
                        .HasForeignKey("DestinationAccountId")
                        .IsRequired()
                        .HasConstraintName("Relationship55");

                    b.HasOne("Domain.Models.Card", "DestinationCard")
                        .WithMany("OperationHistoryDestinationCards")
                        .HasForeignKey("DestinationCardId")
                        .HasConstraintName("Relationship56");

                    b.HasOne("Domain.Models.Account", "SenderAccount")
                        .WithMany("OperationHistorySenderAccounts")
                        .HasForeignKey("SenderAccountId")
                        .IsRequired()
                        .HasConstraintName("Relationship52");

                    b.HasOne("Domain.Models.Card", "SenderCard")
                        .WithMany("OperationHistorySenderCards")
                        .HasForeignKey("SenderCardId")
                        .HasConstraintName("Relationship17");

                    b.HasOne("Domain.Models.OperationStatus", "Status")
                        .WithMany("OperationHistories")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("Relationship19");

                    b.HasOne("Domain.Models.OperationType", "Type")
                        .WithMany("OperationHistories")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Relationship18");

                    b.Navigation("DestinationAccount");

                    b.Navigation("DestinationCard");

                    b.Navigation("SenderAccount");

                    b.Navigation("SenderCard");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.Tred", b =>
                {
                    b.HasOne("Domain.Models.Chat", "Chat")
                        .WithMany("Treds")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("Relationship43");

                    b.HasOne("Domain.Models.User", "Operator")
                        .WithMany("Treds")
                        .HasForeignKey("OperatorId")
                        .HasConstraintName("Relationship45");

                    b.Navigation("Chat");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Chat", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("Relationship39");

                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("Relationship3");

                    b.Navigation("Chat");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Deposits");

                    b.Navigation("Loans");

                    b.Navigation("OperationHistoryDestinationAccounts");

                    b.Navigation("OperationHistorySenderAccounts");
                });

            modelBuilder.Entity("Domain.Models.AccountStatus", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.Navigation("OperationHistoryDestinationCards");

                    b.Navigation("OperationHistorySenderCards");
                });

            modelBuilder.Entity("Domain.Models.Chat", b =>
                {
                    b.Navigation("Treds");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Currency", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Domain.Models.DepositStatus", b =>
                {
                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Domain.Models.DepositType", b =>
                {
                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Domain.Models.Document", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Domain.Models.LoanStatus", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Models.LoanType", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Models.Message", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Models.MessageStatus", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Models.OperationStatus", b =>
                {
                    b.Navigation("OperationHistories");
                });

            modelBuilder.Entity("Domain.Models.OperationType", b =>
                {
                    b.Navigation("OperationHistories");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Tred", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Models.TypeOfCard", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Documents");

                    b.Navigation("Files");

                    b.Navigation("Messages");

                    b.Navigation("Treds");
                });
#pragma warning restore 612, 618
        }
    }
}
