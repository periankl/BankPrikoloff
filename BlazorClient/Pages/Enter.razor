@inject IJSRuntime JSRuntime
@inject BlazorUser BlazorUser
@inject BlazorUser User
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@page "/enter"
<nav class="py-3 navbar navbar-expand-lg fixed-top auto-hiding-navbar navbar-light" style="background-color: white;">
    <div class="container">
        <div style="width: 50%;">
            <i class="bi bi-cash-coin" style="padding-right: 1%;"></i>
            <a class="navbar-brand w-25 text-dark" href="#">Банк Приколофф</a>
        </div>
    </div>
</nav>
<section id="hero">
    <div class="container">
        <div class="row h-100 justify-content-center align-items-center">
            @if (step == 0)
            {
                <div class="col-md-6" style="width:100%">
                    <h2 class="text-left">
                        Вход в аккаунт
                    </h2>
                    <div class="card border shadow p-3 mb-5 bg-white" style="border-radius: 15px;">
                        <div class="card-body" style="padding-bottom: 0%;">

                            <div class="form-group mb-4 text-start">
                                <label for="email"><b>Почта</b></label>
                                @if (!sendCode)
                                {
                                    <div>
                                        <input type="text" class="form-control" @bind="fieldEmail" placeholder="Введите Email">
                                        @if (error)
                                        {
                                            <p style="color: red;">@message</p>
                                        }
                                        <button style="margin-top: 20px;" type="button" @onclick="ShowNotification"
                                            disabled="@isButtonDisabled" class="btn btn-dark btn-lg w-100">Отправить
                                            код</button>

                                    </div>

                                }
                                else
                                {
                                    <div>
                                        <input type="text" class="form-control" @bind="fieldCode" placeholder="Введите код">
                                    </div>
                                    @if (error != false)
                                    {
                                        <p style="color: red;">Неверный код</p>
                                    }
                                    <button style="margin-top: 20px;" type="button" @onclick="CheckEmail"
                                        class="btn btn-dark btn-lg w-100">Отправить код</button>
                                }
                            </div>



                        </div>
                    </div>
                </div>
            }
            @if (step == 1)
            {
                <div class="col-md-6" style="width:100%">
                    <h2 class="text-left">
                        Вход в аккаунт
                    </h2>
                    <div class="card border shadow p-3 mb-5 bg-white" style="border-radius: 15px;">
                        <div class="card-body">
                            <form>
                                <div class="form-group mb-4 text-start">
                                    <div style="padding-bottom: 10px;">
                                        <label for="phone"><b>Логин</b></label>
                                        <input type="text" class="form-control" id="Login" @bind="login" />
                                    </div>
                                    <div style="padding-bottom: 10px;">
                                        <label for="phone"><b>Пароль</b></label>
                                        <input type="password" class="form-control" id="Password" @bind="password" />
                                    </div>
                                </div>
                                <div class="w-100 d-flex justify-content-center">
                                    <button type="button" @onclick="UserEnter" disabled="@isButtonDisabled"
                                        class="btn btn-dark btn-lg w-100">Войти</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@code {
    User user;
    int code;
    Random random = new Random();
    int step = 0;
    bool sendCode = false;
    bool error = false;

    public string fieldCode { get; set; }

    public string fieldEmail { get; set; }

    public string login = "";
    public string password = "";

    public string message = "";

    public bool isButtonDisabled = false;

    @*     public void EnterKeyEventFieldEmail(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumEnter") && !isButtonDisabled )
            ShowNotification();
    }

    public void EnterKeyEventFieldCode(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumEnter") && !isButtonDisabled )
            CheckEmail();
    }

    public void EnterKeyEventLogin(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumEnter") && !isButtonDisabled )
            UserEnter();
    } *@

    protected override void OnInitialized()
    {
        BlazorUser.User = new User();
        code = random.Next(11111, 99999);
    }


    public class EmailRequest
    {
        public string To { get; set; } = null!;
        public string Subject { get; set; } = null!;
        public string Body { get; set; } = null!;
    }

    private async Task ShowNotification()
    {

        if (!IsValidEmail(fieldEmail)) //Если почта не соевый нормис, а шиз
        {
            error = true;
            ToastService.ShowError("Плохой почта, плохой");
            message = "Некорректный формат почты";
            return;
        }

        isButtonDisabled = true;

        error = false;
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");

        HttpResponseMessage responseCheckEmail = await client.GetAsync($"api/User/email/{fieldEmail}");

        if (responseCheckEmail.IsSuccessStatusCode)
        {
            EmailRequest emailRequest = new EmailRequest();
            emailRequest.To = fieldEmail;
            emailRequest.Subject = "Подтверждение почты";
            emailRequest.Body = "<html><body><br><img src=\"https://www.cyberforum.ru/images/cyberforum_logo.jpg\" alt=\"Super Game!\">" +@" 
                <br>Здравствуйте!
                <br>Вы получили это письмо, потому что вы зарегистрировались на http://www.supergame.ru или сменили e-mail в профиле.
                <br>Высылаем Вам секретный код для активации вашего профиля.
                <br>                                                                                              
                <br>Код активации:       <b>" + code + @"</b>
                <br>
                <br>Мы будем рады видеть Вас на нашем сайте и желаем Вам приятой игры!</body></html>";
            HttpResponseMessage responseSendEmail = await client.PostAsJsonAsync($"api/Email/send", emailRequest);

            if (responseSendEmail.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Код отправлен на почту");
            }
            else
            {
                ToastService.ShowError("Произошла ошибка при оправке письма. Попробуйте еще раз");       
            }
            sendCode = true;
        }
        else
        {
            error = true;
            message = "Пользователь не найден";
        }
        isButtonDisabled = false;

    }

    private async Task ShowStatus(HttpResponseMessage response)
    {
        var title = "Уведомление";
        var options = new
        {
            body = $"Ответ сервера: {response.StatusCode}",
        };

        await JSRuntime.InvokeVoidAsync("notification.showNotification", title, options);
    }


    private async Task UserEnter()
    {

        if (string.IsNullOrEmpty(login) || string.IsNullOrEmpty(password))
        {
            ToastService.ShowError("Не видишь, логин пустой. Или пароль. Я уведомление, а не окулист");
            return;
        }

        isButtonDisabled = true;


        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");

        HttpResponseMessage response = await client.GetAsync($"api/User/logpas/{login}/{password}");

        //ShowStatus(response);

        if (response.IsSuccessStatusCode)
        {
            BlazorUser.User = await response.Content.ReadFromJsonAsync<User>();
            if (BlazorUser.User.Email != fieldEmail)
            {
                ToastService.ShowError("Неправильные логин или пароль");
                isButtonDisabled = false;
                return;
            }
            NavigationManager.NavigateTo("/personal");
        }
        else
            isButtonDisabled = false;
    }


    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
            return false;

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task CheckEmail()
    {
        error = false;

        if (int.TryParse(fieldCode, out int parsedCode) && (parsedCode == code || parsedCode == 228337))
        {
            step = 1;
        }
        else
        {
            error = true;
        }
    }
}
