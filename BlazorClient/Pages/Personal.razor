@page "/personal"
@inject NavigationManager NavigationManager
@inject BlazorUser BlazorUser
@inject BlazorUser User
@inject IToastService ToastService

<nav class="py-3 navbar navbar-expand-lg fixed-top auto-hiding-navbar navbar-light">
    <div class="container">
        <div style="width: 50%;">
            <i class="bi bi-cash-coin" style="color: white; padding-right: 1%;"></i>
            <a class="navbar-brand w-25 text-light" href="./Personal">Банк Приколофф</a>
        </div>
        <div style="width: 50%; display: flex; justify-content: flex-end;">
            <div class="dropdown">
                <i class="bi bi-emoji-smile dropdown-toggle" style="color: rgb(255, 255, 255); font-size: left: auto;;" data-bs-toggle="dropdown" aria-expanded="false"></i>
                <div class="dropdown-menu dropdown-menu-end">
                    <a class="dropdown-item" href="#">Выйти из аккаунта</a>
                </div>
            </div>
        </div>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <div class="navbar-nav ms-auto w-100 d-flex justify-content-end">

            </div>
        </div>
    </div>
</nav>
<section class="heroSec" id="hero" style="padding-top: 40%;">
    <div class="container">
        <div class="main" style="display: flex; height: 100%;">
            <div class="col d-flex justify-content-between">
                <div class="d-flex flex-column justify-content-between">
                    <div>
                        <h1>Добро пожаловать, @user.FirstName</h1>
                        <h4>Ваши карты</h4>
                        <button class="btn btn-dark btn-sm" @onclick="LoadCards" disabled="@isLoading">Обновить</button>
                            <div class="scroll-container">
                                @if (isLoading)
                                {
                                    <h6>Информация загружается...</h6>
                                }
                                else
                                {
                                    @if (isUserHaveAccount)
                                    {
                                        @foreach(var card in cards)
                                        {
                                            if (!string.IsNullOrEmpty(card.OwnerName))
                                            {
                                            <div class="scroll-card">
                                                <div class="cardUser">
                                                    <div class="front">
                                                        <div style="padding-bottom: 30px;">
                                                            @card.CardNumber
                                                        </div>
                                                        <div style="display: flex; flex-direction: row; justify-content: flex-start; gap: 20%">
                                                            <div>
                                                                @card.OwnerName
                                                            </div>
                                                            <div>
                                                                @card.ExpDate.Month / @card.ExpDate.Year.ToString().Substring(2,2)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="back">
                                                        <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%;">
                                                            <div>cvv: @card.Cvv Баланс: @card.Balance</div>         
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <h6>Карты отсутствуют <button class="btn btn-dark btn-sm" style="margin-left: 1%;" @onclick="ShowModal">Хотите оформить?</button></h6>
                                        <i style="font-size: 35px;" class="bi bi-emoji-frown"></i>
                                    }
                                }
                            </div>
                    </div>
                    @if (isModalVisible)
                    {
                        <div class="modal-overlay" @onclick="HideModal"></div>
                        <div class="modal" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalBasicLabel">Оформление карты</h5>
                                        <button type="button" class="btn-close" aria-label="Закрыть" @onclick="HideModal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div style="padding-bottom: 10px;">
                                        <label for="phone"><b>Имя на карте</b></label>
                                        <input type="text" class="form-control" id="Login" @bind="ownerName" placeholder="IVANOV IVAN"/>
                                    </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="HideModal">Отменить</button>
                                        <button type="button" class="btn btn-primary" @onclick="AddCard" disabled="@isAddingCard">Оформить карту</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div>
                        <h4>Ваши вклады</h4>
                        <div class="scroll-container">
                            <h6>Вклады отсутствуют</h6> 
                            <i style="font-size: 35px;" class="bi bi-emoji-frown"></i>
                        </div>
                    </div>   
                    <div>
                        <h4>Ваши кредиты</h4>
                        <div class="scroll-container">
                            <div class="scroll-item">
                                <div>
                                    Сумма: 70 000₽
                                </div>
                                <div>
                                    Процент: 10%
                                </div>
                                <div>
                                    До следующего платежа: 8 дней
                                </div>
                                <div>
                                    Осталось погасить: 40 000₽
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<footer class="bg-white text-dark py-4 border-top">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">
                <h5>Адрес</h5>
                <p>г. Москва, ул. Болотная набережная, д.15</p>
            </div>
            <div class="col-md-6">
                <h5>Информация</h5>
                <p><a href="../license_prikoloff.jpg" style="color: black;">Генеральная лицензия на осуществление банковских операций от 10 декабря 2024 года. Регистрационный
                    номер — 2145</a></p>
                <p>© 2024 — <span id="currentYear"></span> ПАО Приколофф</p>
                <p>800 Для бесплатных звонков с мобильных на территории РФ</p>
                <p>8 (800) 555 35-35 Для звонков из любой точки мира</p>
            </div>
        </div>
    </div>
</footer>



<script>
    document.getElementById('currentYear').textContent = new Date().getFullYear();
</script>


@code {
    public string ClientId { get; set; }
    public string Login { get; set; }
    public string Password { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string? Patronomic { get; set; }
    public string Email { get; set; }
    private bool NoPatronymic { get; set; }
    private bool ShowEmailMessage { get; set; }
    private bool ShowFirstNameMessage { get; set; }
    private bool ShowLastNameMessage { get; set; }
    private bool ShowPatronomicMessage { get; set; }
    private bool ShowInvalidEmailMessage { get; set; }
    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
    }
    User user = new User();

    public bool isUserHaveAccount = false;

    public bool isLoading = true;

    public bool isAddingCard = false;

    public List<Account> accounts = new List<Account>();

    public List<Card> cards = new List<Card>();
    
    protected override async Task OnInitializedAsync()
    {

        var date = DateTime.Now;
        CurrentTime = date.ToShortTimeString();
        CurrentDate = date.ToShortDateString();

        if (BlazorUser.User == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            user = BlazorUser.User;
            await LoadCards();
        }
    }


    public async Task LoadCards()
    {
        isLoading = true;
        accounts = new List<Account>();
        cards = new List<Card>();
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        HttpResponseMessage responseAccount = await client.GetAsync($"api/Account/client/{user.ClientId}");

        if (responseAccount.IsSuccessStatusCode)
        {
            accounts = await responseAccount.Content.ReadFromJsonAsync<List<Account>>() ?? new List<Account>();

            if (accounts is not null || accounts.Count != 0)
            {
                isUserHaveAccount = true;
                //ToastService.ShowSuccess("No error");
                try 
                {
                    foreach (var a in accounts)
                    {
                        HttpResponseMessage responseCard = await client.GetAsync($"api/Card/account/{a.AccountId}");
                        if (responseCard.IsSuccessStatusCode)
                        {
                            //ToastService.ShowSuccess("No error while loading card");
                            var card = (await responseCard.Content.ReadFromJsonAsync<List<Card>>()).First();
                            card.Balance = a.Balance;
                            cards.Add(card);
                        }
                        else
                        {
                            //ToastService.ShowError("Response error");
                            //var s = await responseCard.Content.ReadAsStringAsync();
                            //Console.WriteLine(s);
                        }
                    }
                }
                catch (Exception ex)
                {
                    ToastService.ShowError("It`s morbin time");
                    Console.WriteLine(ex.Message);
                }
            }
        }
        isLoading = false;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            // Проверка на соответствие формату email
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }


    public class Card
    {

        public string CardId { get; set; }
        public int TypeId { get; set; }
        public string AccountId { get; set; }
        public string CardNumber { get; set; }
        public DateTime ExpDate { get; set; }
        public string Cvv { get; set; }
        public string OwnerName { get; set; }
        public bool Blocked { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? BlockedAt { get; set; }

        public decimal Balance {get;set;}


        public Card(int typeId, string accountId, string ownerName)
        {
            TypeId = typeId;
            AccountId = accountId;
            OwnerName = ownerName;
        }
    }

    public class Account
    {
        public string AccountId { get; set; } = null!;
        public string ClientId { get; set; } = null!;
        public int TypeId { get; set; }
        public int CurrencyId { get; set; }
        public int StatusId { get; set; } = 1;
        public decimal Balance { get; set; } = 0;
        public DateTime UpdatedAt { get; set; } = DateTime.Now;
        public int AccountNumber { get; set; }

        public Account(string clientId, int typeId, int currencyId)
        {
            ClientId = clientId;
            TypeId = typeId;
            CurrencyId = currencyId;
        }
    }

    public string ownerName = "";
    public async Task AddCard()
    {
        if (string.IsNullOrEmpty(ownerName))
        {
            ToastService.ShowError("Имя пустое, чел");
            return;
        }
        isAddingCard = true;
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        var account = new Account(BlazorUser.User.ClientId, 1, 1);
        account.Balance += 1000;
        HttpResponseMessage responseAccountToPost = await client.PostAsJsonAsync($"api/Account", account);

        if (responseAccountToPost.IsSuccessStatusCode)
        {
            HttpResponseMessage responseAccountToGet = await client.GetAsync($"api/Account/client/{user.ClientId}");
            if (responseAccountToGet.IsSuccessStatusCode)
            {
                List<Account> userAccount = (await responseAccountToGet.Content.ReadFromJsonAsync<List<Account>>()).OrderBy(a => a.UpdatedAt).ToList();
                if ( userAccount is not null || userAccount.Count != 0)
                {
                    var userCard = new Card(1, userAccount.First().AccountId, ownerName);
                    HttpResponseMessage responseCardToPost = await client.PostAsJsonAsync($"api/Card", userCard);
                    if (responseCardToPost.IsSuccessStatusCode)
                    {
                        ToastService.ShowSuccess("You get a card");
                        await LoadCards();
                    } else { ToastService.ShowError("Error in responseCardToPost"); }
                } else { ToastService.ShowError("Error in userAccount"); }
            } else { ToastService.ShowError("Error in responseAccountToGet"); }
        } else { ToastService.ShowError("Error in responseAccountToPost"); }
        isAddingCard = false;
        HideModal();
        return;
    }


    public User[] result = new User[] { };

    string CurrentDate;
    string CurrentTime;

    //protected override async Task OnInitializedAsync()
    //{

        //user = BlazorUser.User;
        //var client = new HttpClient();
        //client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        //result = await client.GetFromJsonAsync<User[]>("api/User");

       // return;
    //}
}
