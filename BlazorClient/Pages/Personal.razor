@page "/personal"
@inject NavigationManager NavigationManager
@inject BlazorUser BlazorUser
@inject BlazorUser User
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions;
@using System.Text.Json;

<nav class="py-3 navbar navbar-expand-lg fixed-top auto-hiding-navbar navbar-light">
    <div class="container">
        <div style="width: 50%;">
            <i class="bi bi-cash-coin" style="color: white; padding-right: 1%;"></i>
            <a class="navbar-brand w-25 text-light" href="./Personal">Банк Приколофф</a>
        </div>
        <div style="width: 50%; display: flex; justify-content: flex-end;">
            <div class="dropdown">
                <i class="bi bi-emoji-smile dropdown-toggle" style="color: rgb(255, 255, 255); font-size: left: auto;;" data-bs-toggle="dropdown" aria-expanded="false"></i>
                <div class="dropdown-menu dropdown-menu-end">
                    <a class="dropdown-item" href="#">Выйти из аккаунта</a>
                </div>
            </div>
        </div>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <div class="navbar-nav ms-auto w-100 d-flex justify-content-end">

            </div>
        </div>
    </div>
</nav>
<section class="heroSec @((isLoading) ? "loading" : "loaded")" id="hero" style="position: sticky;">
    <div class="container">
        <div class="main" style="display-flex; height: 100%;">
            <div class="col d-flex justify-content-between">
                <div class="d-flex flex-column justify-content-between">
                    <div>
                        <h1>Добро пожаловать, @user.FirstName</h1>
                        <div style="display: flex; flex-direction: row">
                            <h4>Ваши карты</h4>
                            <button class="btn btn-dark btn-sm" style="margin-left: 1%;" @onclick="ShowModal" disabled="@isLoading">Хотите оформить?</button>                                                       
                        </div>
                        <button class="btn btn-dark btn-sm" @onclick="LoadCards" disabled="@isLoading">Обновить</button>
                            <div class="scroll-container">
                                @if (isLoading)
                                {
                                    <h6>Информация загружается...</h6>
                                }
                                else
                                {
                                    if(cards is null || cards.Count == 0){
                                        <i style="font-size: 35px;" class="bi bi-emoji-frown"></i>
                                        <h6>Карты отсутствуют</h6> 
                                    }
                                    @if (isUserHaveAccount)
                                    {
                                        @foreach(var card in cards)
                                        {
                                            if (!string.IsNullOrEmpty(card.OwnerName))
                                            {
                                            <div class="scroll-card">
                                                <div class="cardUser">
                                                    <div class="front">
                                                        <div style="padding-bottom: 30px;">
                                                            @card.CardNumber
                                                        </div>
                                                        <div style="display: flex; flex-direction: row; justify-content: flex-start; gap: 20%">
                                                            <div>
                                                                @card.OwnerName
                                                            </div>
                                                            <div>
                                                                @card.ExpDate.Month / @card.ExpDate.Year.ToString().Substring(2,2)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="back">
                                                        <div style="display: flex; flex-direction: column; justify-content: end; align-items: center; height: 100%; gap: 10%">
                                                            <div>cvv: @if(IsShowInfo){@card.Cvv} else {<span>***</span>}  Баланс: @card.Balance</div>
                                                            @if (card.Blocked)
                                                            {
                                                                <div>Карта заблокирована</div>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-dark btn-sm w-100" @onclick="ShowInfo">Показать информацию</button>           
                                                                <button class="btn btn-success btn-sm w-100" @onclick="ShowTransactionModal">Перевести деньги</button>                                                       
                                                                <button class="btn btn-danger btn-sm w-100" disabled="@isCardBlockLoad" @onclick="() => BlockCard(card.CardId)">Заблокировать</button> 
                                                      
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <h6>Карты отсутствуют <button class="btn btn-dark btn-sm" style="margin-left: 1%;" @onclick="ShowModal">Хотите оформить?</button></h6>
                                        <i style="font-size: 35px;" class="bi bi-emoji-frown"></i>
                                    }
                                }
                                <div>
                                </div>
                            </div>
                    </div>
                    @if (isTransactionVisible)
                    {
                        <div class="modal-overlay" @onclick="HideTransactionModal"></div>
                        <div class="modal" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalBasicLabel">Перевести деньги</h5>
                                        <button type="button" class="btn-close" aria-label="Закрыть" @onclick="HideTransactionModal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div style="padding-bottom: 10px;">
                                            <label for="phone"><b>Номер карты получателя</b></label>
                                            <input type="text" class="form-control" placeholder="2222 2222 2222 2222"/>
                                        </div>
                                        <div style="padding-bottom: 10px;">
                                            <label for="phone"><b>Сумма</b></label>
                                            <input type="text" class="form-control" placeholder=""/>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="HideTransactionModal">Отменить</button>
                                        <button type="button" class="btn btn-primary" disabled="@isAddingCard">Выполнить перевод</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (isModalVisible)
                    {
                        <div class="modal-overlay" @onclick="HideModal"></div>
                        <div class="modal" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalBasicLabel">Оформление карты</h5>
                                        <button type="button" class="btn-close" aria-label="Закрыть" @onclick="HideModal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div style="padding-bottom: 10px;">
                                            <label for="phone"><b>Имя на карте</b></label>
                                            <input type="text" class="form-control" id="Login" @bind="ownerName" placeholder="IVANOV IVAN"/>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="HideModal">Отменить</button>
                                        <button type="button" class="btn btn-primary" @onclick="AddCard" disabled="@isAddingCard">Оформить карту</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div>
                        <div style="display: flex; flex-direction: row">
                            <h4>Ваши вклады</h4>
                            <button class="btn btn-dark btn-sm" style="margin-left: 1%;" @onclick="ShowModalDeposit" disabled="@IsDepositLoading">Хотите оформить?</button>                                                       
                        </div>
                        <button class="btn btn-dark btn-sm" @onclick="LoadDeposits" disabled="@IsDepositLoading">Обновить</button>
                        <div class="scroll-container">
                            @if (IsDepositLoading)
                            {
                                <h6>Информация загружается...</h6>
                            }
                            else 
                            {
                                @if (deposits is null || deposits.Count == 0)
                                {
                                    <i style="font-size: 35px;" class="bi bi-emoji-frown"></i>
                                    <h6>Вклады отсутствуют</h6> 
                                }
                                else 
                                {
                                    foreach (var d in deposits)
                                    {
                                        <div class="scroll-deposite">
                                            <div>
                                                Тип вклада: @d.TypeName
                                            </div>
                                            <div>
                                                Сумма: @d.Balance
                                            </div>
                                            <div>
                                                Процент: @d.IncreasestRate %
                                            </div>
                                            <div>
                                                Дата открытия: @d.StartDate.ToShortDateString()
                                            </div>
                                            
                                                @if (@d.EndDate is not null) 
                                                {
                                                    <div>
                                                        Дата закрытия: @Convert.ToDateTime(d.EndDate).ToShortDateString()
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div>
                                                        Бессрочный
                                                    </div>
                                                }
                                            
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>  
                    @if (isModalDepositVisible)
                    {
                        <div class="modal-overlay" @onclick="HideModalDeposit"></div>
                        <div class="modal" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalBasicLabel">Оформление вклада</h5>
                                        <button type="button" class="btn-close" aria-label="Закрыть" @onclick="HideModalDeposit"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div style="padding-bottom: 10px;">
                                            <div class="dropdown">
                                            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                @NameOfDepositComboBox
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                <li><a class="dropdown-item" @onclick="() => TypeOf(1)">Тип 1</a></li>
                                                <li><a class="dropdown-item" @onclick="() => TypeOf(2)">Тип 2</a></li>
                                                <li><a class="dropdown-item" @onclick="() => TypeOf(3)">Тип 3</a></li>
                                            </ul>
                                        </div> 
                                    </div>
                                        <div style="padding-bottom: 10px;">
                                            <label for="email"><b>Дата возврата</b></label>
                                            <input type="date" class="form-control" @bind="depositEndTime" disabled="@(!IsDepositHaveEnd)"/>
                                        </div>
                                        <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: 15px;">
                                            Бессрочный
                                            <input type="checkbox" @onclick="ChangeDepositEnd">
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="HideModalDeposit">Отменить</button>
                                        <button type="button" class="btn btn-primary" disabled="@IsDepositLoading" @onclick="AddDeposit">Оформить вклад</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div>
                        <div style="display: flex; flex-direction: row">
                            <h4>Ваши кредиты</h4>
                            <button class="btn btn-dark btn-sm" style="margin-left: 1%;" @onclick="ShowModalLoan">Хотите оформить?</button>                                                       
                        </div>
                        <div class="scroll-container">
                            <div class="scroll-loan">
                                <div>
                                    Тип кредита:
                                </div>
                                <div>
                                    Сумма: 70 000₽
                                </div>
                                <div>
                                    Процент: 10%
                                </div>
                                <div>
                                    До следующего платежа: 8 дней
                                </div>
                                <div>
                                    Осталось погасить: 40 000₽
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (isModalLoanVisible)
                    {
                        <div class="modal-overlay" @onclick="HideModalLoan"></div>
                        <div class="modal" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalBasicLabel">Оформление кредита</h5>
                                        <button type="button" class="btn-close" aria-label="Закрыть" @onclick="HideModalLoan"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div style="padding-bottom: 10px;">
                                            <div class="dropdown" style="padding-bottom: 10px;">
                                            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                                Выберите тип кредита
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                <li><a class="dropdown-item" href="#">Тип 1</a></li>
                                                <li><a class="dropdown-item" href="#">Тип2</a></li>
                                                <li><a class="dropdown-item" href="#">Тип 3</a></li>
                                            </ul>
                                            </div>
                                            <div style="padding-bottom: 10px;">
                                                <label for="phone"><b>Сумма</b></label>
                                                <input type="text" class="form-control"/>
                                            </div>
                                            <div style="padding-bottom: 10px;">
                                                <label for="email"><b>Дата возврата</b></label>
                                                <input id="depositEndTime" type="date" class="form-control" @bind="depositEndTime"/>
                                            </div>
                                    </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" @onclick="HideModalLoan">Отменить</button>
                                        <button type="button" class="btn btn-primary" disabled="@isAddingCard">Оформить кредит</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>
<footer class="bg-white text-dark py-4 border-top">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">
                <h5>Адрес</h5>
                <p>г. Москва, ул. Болотная набережная, д.15</p>
            </div>
            <div class="col-md-6">
                <h5>Информация</h5>
                <p><a href="../license_prikoloff.jpg" style="color: black;">Генеральная лицензия на осуществление банковских операций от 10 декабря 2024 года. Регистрационный
                    номер — 2145</a></p>
                <p>© 2024 — <span id="currentYear"></span> ПАО Приколофф</p>
                <p>800 Для бесплатных звонков с мобильных на территории РФ</p>
                <p>8 (800) 555 35-35 Для звонков из любой точки мира</p>
            </div>
        </div>
    </div>
</footer>


<script>
    document.getElementById('currentYear').textContent = new Date().getFullYear();
</script>


@code {
    public string ClientId { get; set; }
    public string Login { get; set; }
    public string Password { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string? Patronomic { get; set; }
    public string Email { get; set; }
    private bool NoPatronymic { get; set; }
    private bool ShowEmailMessage { get; set; }
    private bool ShowFirstNameMessage { get; set; }
    private bool ShowLastNameMessage { get; set; }
    private bool ShowPatronomicMessage { get; set; }
    private bool ShowInvalidEmailMessage { get; set; }
    private bool isModalVisible = false;
    private bool isModalDepositVisible = false;
    private bool isModalLoanVisible = false;
    private bool isTransactionVisible = false;
    public bool isCardBlockLoad = false;
    public bool isUserHaveAccount = false;
    public string cvvCode;
    public bool isLoading = true;
    public bool IsShowInfo = false;
    public bool isAddingCard = false;

    public List<Account> accounts = new List<Account>();

    public List<CardWithBalance> cards = new List<CardWithBalance>();
    
    public string ser;
    public string num;
    
    public string NameOfDepositComboBox = "Выберите тип вклада";
    public int TypeDeposit = 1;
    private void TypeOf(int type){
        switch(type){
            case 1:
                NameOfDepositComboBox = "Базовый";
                break;
            case 2: 
                NameOfDepositComboBox = "Расширенный";
                break;
            case 3:
                NameOfDepositComboBox = "Накопительный";
                break;
        }
        TypeDeposit = type;
    }
    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
    }

    private void ShowModalDeposit()
    {
        isModalDepositVisible = true;
    }
    private void HideModalDeposit()
    {
        isModalDepositVisible = false;
    }

    private void ShowModalLoan()
    {
        isModalLoanVisible = true;
    }
    private void HideModalLoan()
    {
        isModalLoanVisible = false;
    }
    
    private void ShowInfo()
    {
        IsShowInfo = !IsShowInfo;
    }

    private void ShowTransactionModal(){
        isTransactionVisible = true;
    }

    private void HideTransactionModal(){
        isTransactionVisible = false;
    }
    User user = new User();



    protected override async Task OnInitializedAsync()
    {

        var date = DateTime.Now;
        depositEndTime = DateTime.Now.AddMonths(6);
        CurrentTime = date.ToShortTimeString();
        CurrentDate = date.ToShortDateString();

        if (BlazorUser.User is not null && !string.IsNullOrEmpty(BlazorUser.User.ClientId))
        {
            user = BlazorUser.User;
            await LoadAccounts();
        }
        else
        {
            var clientId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "ClientId");
            if (!string.IsNullOrEmpty(clientId))
            {
                HttpClient client = new HttpClient();
                client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
                HttpResponseMessage response = await client.GetAsync($"api/User/id/{clientId}");

                BlazorUser.User = await response.Content.ReadFromJsonAsync<User>();
                if (BlazorUser.User is null)
                {
                    NavigationManager.NavigateTo("/");
                }
                user = BlazorUser.User;
                await LoadAccounts();
            }
            else
            {
                NavigationManager.NavigateTo("/");
                return;
            }
        }

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "ClientId", BlazorUser.User.ClientId);

        ser = user.SeriesPasport.ToString();
        num = user.NumberPasport.ToString();

        if(ser == null || ser.Length < 4 || num == null || num.Length < 6){
            ToastService.ShowWarning("Пожалуйста, исправьте паспортную информацию в профиле");
        }

        await LoadCards();
        await LoadDeposits();
    }



    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;

        try
        {
            // Проверка на соответствие формату email
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class Card
    {
        public string CardId { get; set; }
        public int TypeId { get; set; }
        public string AccountId { get; set; }
        public string CardNumber { get; set; }
        public DateTime ExpDate { get; set; }
        public string Cvv { get; set; }
        public string OwnerName { get; set; }
        public bool Blocked { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? BlockedAt { get; set; }


        public Card(int typeId, string accountId, string ownerName)
        {
            TypeId = typeId;
            AccountId = accountId;
            OwnerName = ownerName;
        }
    }

    public class CardWithBalance : Card
    {
        public decimal Balance {get;set;}

        public CardWithBalance(int typeId, string accountId, string ownerName)
            : base(typeId, accountId, ownerName)
        {
            
        }
    }

    public class Account
    {
        public string AccountId { get; set; } = null!;
        public string ClientId { get; set; } = null!;
        public int TypeId { get; set; }
        public int CurrencyId { get; set; }
        public int StatusId { get; set; } = 1;
        public decimal Balance { get; set; } = 0;
        public DateTime UpdatedAt { get; set; } = DateTime.Now;
        public int AccountNumber { get; set; }

        public Account(string clientId, int typeId, int currencyId)
        {
            ClientId = clientId;
            TypeId = typeId;
            CurrencyId = currencyId;
        }
    }


    public async Task LoadAccounts()
    {
        accounts = new List<Account>();
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        accounts = await client.GetFromJsonAsync<List<Account>>($"api/Account/client/{user.ClientId}") ?? new List<Account>();
    }


    public DateTime depositEndTime;
    public bool IsDepositHaveEnd = true;

    public bool IsDepositLoading = true;

    public class CreateDepositRequest
    {
        public int DepositTypeId { get; set; }
        public string AccountId { get; set; } = null!;
        public DateTime? EndDate { get; set; }
    }

    public class GetDepositRequest
    {
        public string DepositId { get; set; } = null!;
        public int DepositTypeId { get; set; }
        public int StatusId { get; set; }
        public string DocumentId { get; set; } = null!;
        public string AccountId { get; set; } = null!;
        public string Name { get; set; } = null!;
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }

    public class GetDepositTypeRequest
    {
        public int DepositTypeId { get; set; }
        public string Name { get; set; } = null!;
        public decimal InterestRate { get; set; }
        public decimal? MinAmount { get; set; }
        public int? MinTerm { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
    }

    public class DepositInfo
    {
        public string TypeName {get; set;}
        public decimal Balance {get;set;}
        public decimal IncreasestRate {get; set;}

        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }

    public void ChangeDepositEnd()
    {
        IsDepositHaveEnd = !IsDepositHaveEnd;
    }

    public async Task AddDeposit()
    {
        IsDepositLoading = true;
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        var account = new Account(BlazorUser.User.ClientId, 1, 1);
        HttpResponseMessage responseAccountToPost = await client.PostAsJsonAsync($"api/Account", account);

        if (responseAccountToPost.IsSuccessStatusCode)
        {
            HttpResponseMessage responseAccountToGet = await client.GetAsync($"api/Account/client/{user.ClientId}");
            if (responseAccountToGet.IsSuccessStatusCode)
            {
                Account userAccount = (await responseAccountToGet.Content.ReadFromJsonAsync<List<Account>>() ?? new List<Account>()).OrderByDescending(a => a.UpdatedAt).ToList().First();
                if (userAccount is not null)
                {
                    accounts.Add(userAccount);
                    var userDeposit = new CreateDepositRequest{ DepositTypeId = TypeDeposit, AccountId = userAccount.AccountId, EndDate = IsDepositHaveEnd ? depositEndTime : null};
                    if(userDeposit.EndDate > DateTime.Now.AddYears(40)){
                        ToastService.ShowError("Вклад можно создать не более чем на 40 лет");
                        return;
                    }
                    if(userDeposit.DepositTypeId == null){
                        ToastService.ShowError("Выберите тип вклада");
                        return;
                    }
                    HttpResponseMessage responseCardToPost = await client.PostAsJsonAsync($"api/Deposit", userDeposit);
                    if (responseCardToPost.IsSuccessStatusCode)
                    {
                        HideModalDeposit();  
                        ToastService.ShowSuccess("Вклад создан");
                    } else { ToastService.ShowError("Error in responseCardToPost");  }
                } else { ToastService.ShowError("Error in userAccount"); }
            } else { ToastService.ShowError("Error in responseAccountToGet"); }
        } else { ToastService.ShowError("Error in responseAccountToPost"); }
        IsDepositLoading = false;
        LoadDeposits();
        return;
    }

    public List<DepositInfo> deposits; 
    public async Task LoadDeposits()
    {
        IsDepositLoading = true;
        deposits = new List<DepositInfo>();
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");

        if (accounts != null && accounts.Count != 0)
        {
            var tasks = accounts.Select(async a =>
            {
                try
                {
                    var deposit = await client.GetFromJsonAsync<GetDepositRequest>($"api/Deposit/account/{a.AccountId}");
                    var depositType = await client.GetFromJsonAsync<GetDepositTypeRequest>($"api/DepositType/{deposit.DepositTypeId}");

                    DepositInfo depositInfo = new DepositInfo
                    {
                        TypeName = depositType.Name,
                        Balance = a.Balance,
                        IncreasestRate = depositType.InterestRate,
                        StartDate = deposit.StartDate,
                        EndDate = deposit.EndDate
                    };

                    return depositInfo;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    return null;
                }
            }).ToList();

            var results = await Task.WhenAll(tasks);

            deposits.AddRange(results.Where(d => d != null));
        }

        IsDepositLoading = false;
    }


    public async Task LoadCards()
    {
        isLoading = true;
        cards = new List<CardWithBalance>();
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");

        if (accounts is not null || accounts.Count != 0)
        {
            isUserHaveAccount = true;
            foreach (var a in accounts)
            {
                try 
                {
                    var card = await client.GetFromJsonAsync<CardWithBalance>($"api/Card/account/{a.AccountId}");
                    card.Balance = a.Balance;
                    cards.Add(card);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }
        isLoading = false;
    }

    public async Task BlockCard(string cardId)
    {
        isCardBlockLoad = true;

        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");

        var cardToBlock = await client.GetFromJsonAsync<Card>($"api/Card/{cardId}");

        if (cardToBlock is null)
        {
            ToastService.ShowError("Карта не найдена");
            return;
        }

        cardToBlock.Blocked = true;
        cardToBlock.BlockedAt = DateTime.Now;

        var responseToBlock = await client.PutAsJsonAsync<Card>($"api/Card", cardToBlock);
        if (responseToBlock.IsSuccessStatusCode)
            ToastService.ShowInfo("Карта заблокирована");
        else
            ToastService.ShowInfo("Карта не заблокирована");
        await LoadCards();
        isCardBlockLoad = false;
        return;
    }

    public string ownerName = "";
    public async Task AddCard()
    {
        if (string.IsNullOrEmpty(ownerName))
        {
            ToastService.ShowError("Имя пустое, чел");
            return;
        }
        isAddingCard = true;
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        var account = new Account(BlazorUser.User.ClientId, 1, 1);
        HttpResponseMessage responseAccountToPost = await client.PostAsJsonAsync($"api/Account", account);

        if (responseAccountToPost.IsSuccessStatusCode)
        {
            HttpResponseMessage responseAccountToGet = await client.GetAsync($"api/Account/client/{user.ClientId}");
            if (responseAccountToGet.IsSuccessStatusCode)
            {
                Account userAccount = (await responseAccountToGet.Content.ReadFromJsonAsync<List<Account>>() ?? new List<Account>()).OrderByDescending(a => a.UpdatedAt).ToList().First();
                if (userAccount is not null)
                {
                    accounts.Add(userAccount);
                    var userCard = new Card(1, userAccount.AccountId, ownerName);
                    HttpResponseMessage responseCardToPost = await client.PostAsJsonAsync($"api/Card", userCard);
                    if (responseCardToPost.IsSuccessStatusCode)
                    {
                        HideModal();
                        ToastService.ShowSuccess("Карта создана");
                        await LoadCards();
                    } else { ToastService.ShowError("Error in responseCardToPost"); }
                } else { ToastService.ShowError("Error in userAccount"); }
            } else { ToastService.ShowError("Error in responseAccountToGet"); }
        } else { ToastService.ShowError("Error in responseAccountToPost"); }
        isAddingCard = false;
        ownerName = "";
        return;
    }



    public User[] result = new User[] { };

    string CurrentDate;
    string CurrentTime;

    //protected override async Task OnInitializedAsync()
    //{

        //user = BlazorUser.User;
        //var client = new HttpClient();
        //client.BaseAddress = new Uri("https://bankprikoloff.onrender.com/");
        //result = await client.GetFromJsonAsync<User[]>("api/User");

       // return;
    //}
}
